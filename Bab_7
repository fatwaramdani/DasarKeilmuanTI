#########
# BAB 7 #
#########

#Gambar 7.1 Ilustrasi model relasional.
library(ggplot2)

# Define the data for the tables and relationships
tables <- data.frame(
  name = c("Customers", "Orders", "Products", "OrderDetails"),
  x = c(1, 3, 5, 3),
  y = c(4, 4, 4, 2)
)

relationships <- data.frame(
  from = c("Customers", "Orders", "Orders", "Products"),
  to = c("Orders", "OrderDetails", "Products", "OrderDetails"),
  x_start = c(1, 3, 3, 5),
  y_start = c(4, 4, 4, 4),
  x_end = c(3, 3, 5, 3),
  y_end = c(4, 2, 4, 2)
)

# Plot the database schema using ggplot2
ggplot() +
  # Add relationship lines
  geom_segment(data = relationships,
               aes(x = x_start, y = y_start, xend = x_end, yend = y_end),
               arrow = arrow(length = unit(0.2, "cm")),
               color = "grey", size = 1) +
  # Add table rectangles
  geom_rect(data = tables,
            aes(xmin = x - 0.5, xmax = x + 0.5, ymin = y - 0.5, ymax = y + 0.5),
            fill = "lightblue", color = "black", alpha = 1) +
  # Add table labels
  geom_text(data = tables, aes(x = x, y = y, label = name),
            size = 8, fontface = "bold") +
  # Customize plot appearance
  theme_minimal(base_size = 20) +
  theme(
    panel.grid = element_blank(),
    axis.title = element_blank(),
    axis.text = element_blank(),
    axis.ticks = element_blank()
  ) +
  ggtitle("Relational Database Model")


#Gambar 7.2 Ilustrasi model hierarkis.
# Load libraries
library(ggplot2)
library(igraph)
library(ggraph)

# Create a data frame representing the hierarchy (edges between nodes)
edges <- data.frame(
  from = c("Root", "Root", "Category 1", "Category 1", "Category 2", "Category 2", "Category 2"),
  to = c("Category 1", "Category 2", "Item 1", "Item 2", "Item 3", "Item 4", "Item 5")
)

# Convert to igraph object
graph <- graph_from_data_frame(edges, directed = TRUE)

# Plot the hierarchy using ggraph
ggraph(graph, layout = 'tree', circular = FALSE) + 
  geom_edge_link(aes(edge_alpha = 0.6, edge_color = 'gray'), show.legend = FALSE) +
  geom_node_point(color = 'lightblue', size = 10) +
  geom_node_text(aes(label = name), size = 8, color = 'black', fontface = 'bold') +
  theme_void() + 
  theme(
    plot.margin = margin(1, 1, 1, 1, 'cm'),
    plot.background = element_rect(fill = 'white', color = 'white')
  ) +
  labs(title = "Hierarchical Database Model") +
  theme(plot.title = element_text(hjust = 0.5, size = 16, face = "bold"))


#Gambar 7.3 Ilustrasi model jaringan.
# Load necessary libraries
library(ggplot2)
library(igraph)

# Create an extended set of nodes (sub-networks)
nodes <- data.frame(name = c("Network1", "Network2", "Network3", "Network4", "Network5",
                             "SubNet1", "SubNet2", "SubNet3", "SubNet4", "SubNet5"))

# Create edges connecting nodes within the main network and sub-networks
edges <- data.frame(from = c("Network1", "Network1", "Network2", "Network3", "Network4",
                             "SubNet1", "SubNet1", "SubNet2", "SubNet3", "SubNet4"),
                    to = c("Network2", "Network3", "Network4", "Network5", "Network5",
                           "SubNet2", "SubNet3", "SubNet4", "SubNet5", "Network5"))

# Create the graph object
g <- graph_from_data_frame(edges, vertices = nodes, directed = TRUE)

# Set node size and color for main networks and sub-networks
V(g)$size <- ifelse(V(g)$name %in% c("Network1", "Network2", "Network3", "Network4", "Network5"), 30, 20)
V(g)$color <- ifelse(V(g)$name %in% c("Network1", "Network2", "Network3", "Network4", "Network5"), "skyblue", "lightgreen")
V(g)$label.color <- "black"
V(g)$label.cex <- 1.5

# Set edge color and width
E(g)$color <- "gray"
E(g)$width <- 2

# Adjust layout to better spread out nodes and improve edge visibility
layout_matrix <- layout_with_lgl(g)  # Use the 'lgl' layout for better node spacing

# Set plot parameters for a clean and professional look
plot(g, layout = layout_matrix, 
     main = "Network Database Model with Sub-Networks", 
     vertex.size = V(g)$size, 
     vertex.color = V(g)$color, 
     vertex.label.color = V(g)$label.color, 
     vertex.label.cex = V(g)$label.cex, 
     edge.color = E(g)$color, 
     edge.width = E(g)$width, 
     edge.arrow.size = 0.5, 
     vertex.label.family = "Arial", 
     vertex.label.font = 2, 
     frame = FALSE)

# Customize plot further with ggplot-like appearance
ggplot2::ggtitle("Network Database Model with Sub-Networks") + theme_minimal() +
  theme(plot.title = element_text(size = 16, face = "bold", hjust = 0.5))


#Gambar 7.4 Ilustrasi model dokumen.
# Load libraries
library(ggplot2)
library(ggforce)
library(grid)

# Create a basic data frame representing the document schema
data <- data.frame(
  x = c(1, 1, 2, 2, 3, 3),
  y = c(4, 3, 4, 3, 4, 3),
  label = c("Dokumen", "Field 1", "Field 2", "Subfield A", "Subfield B", "Subfield C"),
  size = c(12, 10, 10, 8, 8, 8)
)

# Create ggplot diagram
ggplot(data, aes(x, y, label = label)) +
  # Place rectangles in the background
  geom_rect(aes(xmin = 0.8, xmax = 1.2, ymin = 2.8, ymax = 4.2), 
            color = "#6A1B9A", fill = "#D1C4E9", size = 1.5, linetype = "solid") +
  geom_rect(aes(xmin = 1.8, xmax = 2.2, ymin = 2.8, ymax = 4.2), 
            color = "#4CAF50", fill = "#C8E6C9", size = 1.5, linetype = "solid") +
  geom_rect(aes(xmin = 2.8, xmax = 3.2, ymin = 2.8, ymax = 4.2), 
            color = "#FF9800", fill = "#FFECB3", size = 1.5, linetype = "solid") +
  # Place text labels on top of rectangles
  geom_text(aes(y = y + 0.3), size = data$size, fontface = "bold", family = "Arial", color = "#333333") +
  # Add arrows between the boxes
  geom_curve(aes(x = 1.2, y = 3.5, xend = 1.8, yend = 3.5), 
             curvature = -0.2, arrow = arrow(type = "closed", length = unit(0.1, "inches")), color = "#6A1B9A", size = 1) +
  geom_curve(aes(x = 2.2, y = 3.5, xend = 2.8, yend = 3.5), 
             curvature = -0.2, arrow = arrow(type = "closed", length = unit(0.1, "inches")), color = "#4CAF50", size = 1) +
  theme_minimal() +
  theme(
    panel.grid = element_blank(),
    plot.margin = unit(c(2, 2, 2, 2), "cm"),
    axis.title = element_blank(),
    axis.text = element_blank(),
    axis.ticks = element_blank(),
    panel.border = element_blank()
  ) +
  ggtitle("Schematic NoSQL Database Model (Document Store)") +
  theme(
    plot.title = element_text(size = 18, face = "bold", color = "#333333", hjust = 0.5)
  )

# Display the plot
ggsave("NoSQL_Document_Schema.png", width = 8, height = 6, dpi = 300)


#Gambar 7.5 Ilustrasi model objek.
library(ggplot2)
library(ggrepel)

# Create data for the tables and relationships (example schema)
# Data for table objects
tables <- data.frame(
  table = c("User", "Order", "Product", "Payment"),
  x = c(1, 3, 5, 7),
  y = c(5, 5, 5, 5),
  width = rep(1.8, 4),
  height = rep(1.2, 4)
)

# Data for relationships between tables
relationships <- data.frame(
  from = c("User", "Order", "Order", "Product", "Payment"),
  to = c("Order", "Product", "Payment", "Order", "User"),
  label = c("Has", "Contains", "Pays", "Belongs To", "Made By"),
  x_from = c(1, 3, 3, 5, 7),
  y_from = c(5, 5, 5, 5, 5),
  x_to = c(3, 5, 7, 3, 1),
  y_to = c(5, 5, 5, 5, 5)
)

# Adjust y-values for arrows to move them slightly above
relationships$y_from <- relationships$y_from + 0.2  # Move 'from' part of the arrow up
relationships$y_to <- relationships$y_to + 0.2      # Move 'to' part of the arrow up

# Plot the object schema
ggplot() +
  # Add rectangles for tables
  geom_rect(data = tables, aes(xmin = x - width / 2, xmax = x + width / 2, ymin = y - height / 2, ymax = y + height / 2), fill = "lightblue", color = "black", size = 1.5) +
  # Add table names
  geom_text(data = tables, aes(x = x, y = y, label = table), size = 8, fontface = "bold", color = "darkblue") +
  # Add relationships with arrows slightly above
  geom_segment(data = relationships, aes(x = x_from, y = y_from, xend = x_to, yend = y_to), arrow = arrow(type = "closed", length = unit(0.15, "inches")), color = "darkred", size = 1) +
  # Add relationship labels
  geom_text_repel(data = relationships, aes(x = (x_from + x_to) / 2, y = (y_from + y_to) / 2, label = label), 
                  size = 7, fontface = "italic", color = "black", 
                  nudge_x = 0, nudge_y = 1, max.overlaps = 10) + 
  # Customize theme
  theme_minimal(base_size = 20) +
  theme(
    axis.text = element_blank(),
    axis.ticks = element_blank(),
    panel.grid = element_blank(),
    plot.margin = margin(20, 20, 20, 20)
  ) +
  labs(title = "")


#Gambar 7.6 Ilustrasi model graf.
# Load required libraries
library(ggplot2)
library(igraph)
library(ggraph)

# Create a more complex set of nodes and relationships for illustration
nodes <- data.frame(
  name = c("Customer", "Order", "Product", "Address", "Payment", "Category", "Supplier", "Inventory", "Shipping", "Discount"),
  type = c("Entity", "Entity", "Entity", "Attribute", "Attribute", "Attribute", "Entity", "Attribute", "Relationship", "Relationship")
)

edges <- data.frame(
  from = c("Customer", "Order", "Order", "Product", "Product", "Product", "Order", "Shipping", "Order", "Payment", "Category", "Supplier"),
  to = c("Order", "Product", "Address", "Category", "Inventory", "Discount", "Shipping", "Product", "Payment", "Shipping", "Supplier", "Inventory")
)

# Create an igraph object
g <- graph_from_data_frame(edges, vertices = nodes, directed = TRUE)

# Create a ggplot to visualize the graph with ggraph
ggraph(g, layout = 'fr') +
  geom_edge_link(aes(color = "gray", alpha = 0.6), show.legend = FALSE) +
  geom_node_point(aes(color = type, size = 5), show.legend = FALSE) +
  scale_color_manual(values = c(
    "Entity" = "deepskyblue", 
    "Attribute" = "orange", 
    "Relationship" = "green"
  )) +
  theme_void() +
  theme(
    plot.background = element_rect(fill = "white"),
    panel.grid = element_blank(),
    plot.margin = margin(10, 10, 10, 10),
    legend.position = "none"
  ) +
  labs(title = "Complex Schematic Database Model") +
  # Add rectangular labels behind the text
  geom_text(aes(label = name, x = x, y = y), color = "black", fontface = "bold", 
            size = 8, 
            label.padding = unit(0.2, "lines"), 
            label.r = unit(0.15, "lines"), 
            label.size = 0.5, inherit.aes = FALSE)



